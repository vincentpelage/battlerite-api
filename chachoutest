// Package import
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const axios = require('axios');
require('dotenv').config();
const mongoose = require('mongoose');
const fakeData = require('./fakeData');
const Match = require('./matchModel');

// Init variable
const app = express();
const key = process.env.KEY_API_BATTLERITE;
const mongoDB = `mongodb://vincent:${process.env.DB_PASS}@ds113749.mlab.com:13749/battlerite-api`;

mongoose.connect(mongoDB);
// lancer et stocker la connexion
const db = mongoose.connection;
// tester la connexion
db.on('error', console.error.bind(console, 'mongoDB connection error: '));
db.once('open', () => {
  console.log('Connected to the DB');
});

// Serve static files from the React app
app.use(express.static(path.join(__dirname, 'client/build')));

getMatchType = async (match) => {
  try {
    return match.type;
  }
  catch(error) {
    console.log(error.response)
  }
}

getMatchId = async (match) => {
  try {
    return match.id;
  }
  catch(error) {
    console.log(error.response)
  }
}

getMatchCreatedAt = async (match) => {
  try {
    return match.attributes.createdAt;
  }
  catch(error) {
    console.log(error.response)
  }
}

getMatchDuration = async (match) => {
  try {
    return match.attributes.duration;
  }
  catch(error) {
    console.log(error.response)
  }
}

getMapId = async (match) => {
  try {
    return match.attributes.stats.mapID;
  }
  catch(error) {
    console.log(error.response)
  }
}

getGameTypeId = async (match) => {
  try {
    return match.attributes.stats.type;
  }
  catch(error) {
    console.log(error.response)
  }
}

getRankingTypeId = async (match) => {
  try {
    return match.attributes.tags.rankingType;
  }
  catch(error) {
    console.log(error.response)
  }
}

getServerTypeId = async (match) => {
  try {
    return match.attributes.tags.serverType;
  }
  catch(error) {
    console.log(error.response)
  }
}

// getRoster1 = async (match) => {
//   try {
//     const Roster1Id = match.relationships.rosters.data[0].id;
//     const getRoster1 = fakeData.included.filter(function( obj ) {
//         return obj.type == 'roster' && obj.id == Roster1Id;
//     });
//     const getParticipantsRoster1Ids = getRoster1[0].relationships.participants.data.map( obj => obj.id );
//     const getStatsRoster1 = getRoster1[0].attributes.stats;
//     return {
//       Roster1Id,
//       ParticipantsRoster1Ids: getParticipantsRoster1Ids,
//       StatsRoster1: getStatsRoster1
//     };
//   }
//   catch(error) {
//     console.log(error.response);
//   }
// }

getRoster1Id = async (match) => {
  try {
    return match.relationships.rosters.data[0].id;
  }
  catch(error) {
    console.log(error.response)
  }
}

getRoster2Id = async (match) => {
  try {
    return match.relationships.rosters.data[1].id;
  }
  catch(error) {
    console.log(error.response)
  }
}

getParticipantsRoster1Ids = async (roster1, fakeData) => {
  try {
    const getRoster1 = fakeData.included.filter(function( obj ) {
        return obj.type == 'roster' && obj.id == roster1;
    });
    return getRoster1[0].relationships.participants.data.map( obj => obj.id );
  }
  catch(error) {
    console.log(error.response)
  }
}

getParticipantsRoster2Ids = async (roster2, fakeData) => {
  try {
    const getRoster2 = fakeData.included.filter(function( obj ) {
        return obj.type == 'roster' && obj.id == roster2;
    });
    return getRoster2[0].relationships.participants.data.map( obj => obj.id );
  }
  catch(error) {
    console.log(error.response)
  }
}

getStatsRoster1 = async (roster1, fakeData) => {
  try {
    const getRoster1 = fakeData.included.filter(function( obj ) {
        return obj.type == 'roster' && obj.id == roster1;
    });
    return getRoster1[0].attributes.stats;
  }
  catch(error) {
    console.log(error.response)
  }
}

getStatsRoster2 = async (roster2, fakeData) => {
  try {
    const getRoster2 = fakeData.included.filter(function( obj ) {
        return obj.type == 'roster' && obj.id == roster2;
    });
    return getRoster2[0].attributes.stats;
  }
  catch(error) {
    console.log(error.response)
  }
}

// isRoster1Won = async (roster1, fakeData) => {
//   try {
//     const getRoster1 = fakeData.included.filter(function( obj ) {
//         return obj.type == 'roster' && obj.id == roster1;
//     });
//     return getRoster1[0].attributes.won;
//   }
//   catch(error) {
//     console.log(error.response)
//   }
// }
//
// isRoster2Won = async (roster2, fakeData) => {
//   try {
//     const getRoster2 = fakeData.included.filter(function( obj ) {
//         return obj.type == 'roster' && obj.id == roster2;
//     });
//     return getRoster2[0].attributes.won;
//   }
//   catch(error) {
//     console.log(error.response)
//   }
// }

main = async (match, fakeData) => {
  try {
    const type = getMatchType(match);
    const id = getMatchId(match);
    const createdAt = getMatchCreatedAt(match);
    const duration = getMatchDuration(match);
    const mapId = getMapId(match);
    const gameType = getGameTypeId(match);
    const rankingType = getRankingTypeId(match);
    const serverType = getServerTypeId(match);
    const roster1Id = getRoster1Id(match);
    const roster2Id = getRoster2Id(match);
    const participantsRoster1 = getParticipantsRoster1Ids(await roster1Id, fakeData);
    const participantsRoster2 = getParticipantsRoster2Ids(await roster2Id, fakeData);
    const statsRoster1 = getStatsRoster1(await roster1Id, fakeData);
    const statsRoster2 = getStatsRoster2(await roster2Id, fakeData);
    // const isRoster1Won = isRoster1Won(await roster1Id, fakeData);
    // const isRoster2Won = isRoster2Won(await roster2Id, fakeData);
    // const roster1 = getRoster1(match);

    const datasMatch =
      {
        type: await type,
        id: await id,
        createdAt: await createdAt,
        duration: await duration,
        mapId: await mapId,
        gameType: await gameType,
        rankingType: await rankingType,
        serverType: await serverType,
        roster1Id: await roster1Id,
        roster2Id: await roster2Id,
        participantsRoster1: await participantsRoster1,
        participantsRoster2: await participantsRoster2,
        statsRoster1: await statsRoster1,
        statsRoster2: await statsRoster2,
        // isRoster1Won: await isRoster1Won,
        // isRoster2Won: await isRoster2Won,
        // roster1: await roster1,
        roster1bis: {
          roster1Id: await roster1Id,
          participantsRoster1Ids: await participantsRoster1,
          statsRoster1: await statsRoster1,
          isRoster1Won: await isRoster1Won,
        }
      };


    const newMatch = new Match(
      datasMatch
    );

    newMatch.save((err, savedMatch) => {
      if (err) {
        console.error(err);
        return err;
      }
      console.log(savedMatch);
    });


  }
  catch(error) {
    console.log(error.response)
  }
}

// Test on fake data
app.get('/chachoutest', (req, res) => {
  fakeData.data.map(match => {
    if(match.attributes.tags.rankingType === "RANKED") {
      main(match, fakeData);
    }
  })

  res.json(fakeData);
});

app.get('*', (req, res) => {
  res.sendFile(path.join(`${__dirname}/client/build/index.html`));
});

const port = process.env.PORT || 5000;
app.listen(port);
